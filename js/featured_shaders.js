var shader_showcase = {

"categories":
[{"id":1,"name":"Art &amp; Abstract","img":"","desc":""},
{"id":2,"name":"Automata","img":"","desc":"<a target=\"_blank\" href=\"http://en.wikipedia.org/wiki/Automata_theory\">Automata Theory</a> is the study of abstract machines and the computational problems that can be solved using them."},
{"id":3,"name":"Cellular","img":"","desc":""},
{"id":4,"name":"Flags","img":"","desc":""},
{"id":5,"name":"Fractals","img":"","desc":""},
{"id":6,"name":"Game-like","img":"","desc":""},
{"id":13,"name":"Lighting &amp; Normals","img":"","desc":""},
{"id":7,"name":"Other","img":"","desc":""},
{"id":8,"name":"Raymarching &amp; Raytracing","img":"","desc":""},
{"id":9,"name":"Terrain","img":"","desc":""},
{"id":10,"name":"Text","img":"","desc":""},
{"id":14,"name":"Texture-like","img":"","desc":""},
{"id":11,"name":"Tunnels","img":"","desc":""},
{"id":12,"name":"Volumetric","img":"","desc":""}],

"shaders":
[{"e":"38.1","ext":"png","cat":[8],"name":"Moonwalking Android","desc":"ray traced androdi by @simesgreen\nmessed around by @blurspline\ndistance field ray caster\nsimon green 06/01/2011\n\nbased on Iniqo Quilez's:\nhttp://www.iquilezles.org/www/material/nvscene2008/rwwtt.pdf\nhttp://www.iquilezles.org/apps/shadertoy/\n\nGoogle Android robot:\nhttp://www.android.com/branding.html\n"},
{"e":"91.27","ext":"png","cat":[6],"name":"Carry the Torch","desc":"Believed to be the first playable game on GLSL Sandbox.\n\nMove your mouse to the yellow start post at the bottom-right.  Get the green flame and carry it slowly and safely to the purple goal post in the upper-right.  If the screen turns blue, you win!!\n"},
{"e":"97.0","ext":"png","cat":[8],"name":"Sea Noise","desc":"By @paulofalcao"},
{"e":"207.3","ext":"png","cat":[2],"name":"Conway's Game of Life","desc":"The classic game plays out in the backbuffer texture, using blue trails to highlight activity."},
{"e":"355.0","ext":"png","cat":[8],"name":"Marble floor with balls","desc":"By @paulofalcao"},
{"e":"380.0","ext":"png","cat":[1],"name":"Blobs","desc":"By @paulofalcao.  This shader is the ancestor of a large number of blob-type gradient shaders."},
{"e":"383.7","ext":"png","cat":[2],"name":"Al's Bugs","desc":"Bugs (in green) hunt for food (in blue)."},
{"e":"395.0","ext":"png","cat":[1],"name":"Fire blobs","desc":""},
{"e":"424.12","ext":"png","cat":[6],"name":"Shader Invaders","desc":""},
{"e":"452.2","ext":"png","cat":[5],"name":"Steer into the fractal","desc":"Use the mouse to guide your decent into the Mandelbrot set.  Your position is stored as two special pixels in the backbuffer.  Note this doesn't seem to work on ANGLE systems, for reasons unknown."},
{"e":"664.0","ext":"png","cat":[12],"name":"Volumetric Happyface","desc":"by @eddbiddulph"},
{"e":"670.0","ext":"png","cat":[8],"name":"Reflective DOF Cubes","desc":"by @eddbiddulph\n\nRaymarched cubes with depth-of-field and reflections."},
{"e":"677.0","ext":"png","cat":[3],"name":"Gems","desc":""},
{"e":"708.0","ext":"png","cat":[1],"name":"Autumn Trees at Night","desc":"by @eddbiddulph\n"},
{"e":"821.2","ext":"png","cat":[1],"name":"Jelly Ring Reflections","desc":"by @eddbiddulph"},
{"e":"832.0","ext":"png","cat":[1],"name":"Another World Backdrop","desc":"By @eddbiddulph\n\nThis is the backdrop to the opening scene from the cult classic computer game Another World.  This image was originally designed and implemented by Eric Chahi. I recreated it by modifying the reverse-engineered Another World source code available at http://fabiensanglard.net/anotherWorld_code_review/index.php.\nIn the process I ran up against constant data storage limitation, instruction count limitation, and graphics driver reset convulsions."},
{"e":"962.14","ext":"png","cat":[8],"name":"Spheres and the Sun","desc":"by @P_Malin\n\nplaying around with ray marching distance fields and lighting"},
{"e":"1296.0","ext":"png","cat":[8],"name":"Rolling in Water","desc":"Author unknown\n\n@blurspline is credited at the top, and he made the ball roll, but he says he's not responsible for the water and waves."},
{"e":"1419.0","ext":"png","cat":[8],"name":"Eyeball","desc":""},
{"e":"1464.0","ext":"png","cat":[8],"name":"DomoKun","desc":""},
{"e":"1621.1","ext":"png","cat":[6],"name":"Half-a-Q*bert in GLSL","desc":"Q*bert will follow the mouse.\nJumping off the board will simply move you back to the top.\nThere's no win condition, but you can toggle each tile twice."},
{"e":"1893.0","ext":"png","cat":[5,8],"name":"Interactive Mandelbulb","desc":"Click \"Hide Code\", then click-and-drag left mouse to rotate, right mouse to zoom."},
{"e":"2141.0","ext":"png","cat":[8],"name":"Sunset on the Sea","desc":"Ray Marching (Sphere Tracing) & Ray Tracing experiment by Riccardo Gerosa aka h3r3"},
{"e":"2214.0","ext":"png","cat":[8],"name":"Fishy Escher's \"Depth\"","desc":"Inspired by Escher's \"Depth\""},
{"e":"2250.4","ext":"png","cat":[10],"name":"Psycoflowers III","desc":"by @h3r3"},
{"e":"2269.2","ext":"png","cat":[1],"name":"Piggy at Revision 2012","desc":"by Floppy"},
{"e":"2400.2","ext":"png","cat":[8],"name":"Raymarched Arches and Blocks","desc":"Mouse-move up/down: look up/down\nMouse-move left/right: move backwards/forwards (cam always points to center of scene)\nSet resolution from 2 (default) to 4 or 8 for faster speeds. 1 or 0.5 will kill your GPU."},
{"e":"2531.5","ext":"png","cat":[1],"name":"Mouse-controlled Fire","desc":"Trying to make the rendermonkey fire fully procedural, just starting out learning about glsl."},
{"e":"2533.23","ext":"png","cat":[9],"name":"Terrain","desc":""},
{"e":"2755.0","ext":"png","cat":[1],"name":"Laser Lights","desc":""},
{"e":"3142.1","ext":"png","cat":[8,9],"name":"Sand Dunes","desc":""},
{"e":"3530.7","ext":"png","cat":[5,8],"name":"Fractal Spheretracer","desc":"by Kabuto\n\nSpheretracing basically starts by placing a sphere at the center of the coordinate system, and then repeatedly increasing the number of spheres by mirroring the spheres across an arbitrarily defined plane.\n\nOf course the number isn't really always doubled since spheres can also get lost if they were on the wrong side of the mirroring plane (since it mirrors one side onto the other one and overwrites what was left there before).\n\nA huge advantage of this process is that it's very easy to raymarch the result. The distance formula never gets a value that's too high.\n"},
{"e":"3780.3","ext":"png","cat":[8],"name":"Stripey cubes","desc":"by gngbng."}]
};
